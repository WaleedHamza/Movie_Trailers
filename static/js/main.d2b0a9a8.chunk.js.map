{"version":3,"sources":["Components/Card/MovieCard.js","Components/Search/Search.js","App.js","serviceWorker.js","index.js"],"names":["MovieCard","console","log","this","props","movie","homepage","url","id","window","location","href","concat","axios","get","then","res","data","videos","results","forEach","item","key","react_default","a","createElement","className","Card","bsPrefix","onClick","visitHomePage","bind","Img","variant","src","backdrop","alt","onError","e","target","onerror","Figure","Image","width","height","poster","Body","Title","title","Text","overview","Footer","release_date","Button","Component","Search","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","movies","titleInput","onChange","assertThisInitialized","_this2","stopPropagation","preventDefault","nativeEvent","stopImmediatePropagation","input","value","setState","TMDB","process","movieItems","poster_path","backdrop_path","film","MovieCard_MovieCard","push","catch","err","Jumbotron","InputGroup","FormControl","aria-label","aria-describedby","type","name","placeholder","App","Components_Search_Search","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d2b0a9a8.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport axios from 'axios'\nimport {Card, Figure, Button} from 'react-bootstrap';\nimport './MovieCard.css'\n\nexport default class MovieCard extends Component {\n\n    visitHomePage() {\n        console.log(this.props.movie.homepage)\n        const url = 'https://www.themoviedb.org/movie/' + this.props.movie.id\n        window.location.href = url\n    }\n    getTrailer() {\n        console.log('clicked')\n        const url = `https://api.themoviedb.org/3/movie/${this.props.movie.id}?api_key=615416944a44ce93ed4100b890e43b0a&append_to_response=videos`;\n        axios\n            .get(url)\n            .then((res) => {\n                var results = res.data.videos.results\n                results.forEach((item) => {\n                    console.log(item.key)\n                })\n            })\n    }\n    render() {\n        return (\n            <div className='container' key={this.props.movie.id}>\n                <Card\n                    bsPrefix='card'\n                    onClick={this\n                    .visitHomePage\n                    .bind(this)}>\n                    <div className='card-img'>\n                        <Card.Img\n                            bsPrefix='card-img'\n                            variant=\"top\"\n                            src={this.props.movie.backdrop}\n                            alt='movie_backdrop'\n                            onError=\n                            {(e)=>{e.target.onerror = null ; e.target.src=\"https://i.stack.imgur.com/GNhxO.png\"}}/>\n                    </div>\n                    <Figure bsPrefix='poster'>\n                        <Figure.Image\n                            bsPrefix='figure-img'\n                            width={171}\n                            height={240}\n                            alt=\"171x180\"\n                            src={this.props.movie.poster}\n                            onError=\n                            {(e)=>{e.target.onerror = null ; e.target.src=\"404.svg\"}}/>\n                    </Figure>\n                    <Card.Body className='movie_details' key={this.props.movie.id}>\n                        <Card.Title><h1>{this.props.movie.title}</h1></Card.Title>\n                        <Card.Text>{this.props.movie.overview}</Card.Text>\n                    </Card.Body>\n                    <Card.Footer bsPrefix='card-footer'>\n                        <small className=\"text-muted\">Release Date: {this.props.movie.release_date}</small>\n                        <Button\n                            variant=\"link\"\n                            onClick={this\n                            .visitHomePage\n                            .bind(this)}>More Info</Button>\n                    </Card.Footer>\n                </Card>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport axios from 'axios';\nimport { Jumbotron, InputGroup, FormControl } from 'react-bootstrap';\nimport MovieCard from'../Card/MovieCard'\nimport './search.css'\n class Search extends Component {\n\n  constructor(){\n    super();\n    this.state = {\n      movies:[],\n      titleInput: ''\n    }\n    this.onChange = this.onChange.bind(this)\n  }\n\n  onChange(e) {\n  e.stopPropagation();\n  e.preventDefault();\n  e.nativeEvent.stopImmediatePropagation();\n    const input = e.target.value\n    const API_KEY = process.env.REACT_APP_TMDB_API_KEY\n    this.setState({titleInput: input})\n    const TMDB = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${input}&page=1&include_adult=false`\n      axios.get(TMDB)\n      .then( (res) => {\n       var movieItems=[]\n        var results = res.data.results\n        results.forEach((movie) => {\n          movie.poster='https://image.tmdb.org/t/p/original' + movie.poster_path\n          movie.backdrop='https://image.tmdb.org/t/p/original' + movie.backdrop_path\n          const film= <MovieCard movie= {movie} key={movie.id}/>\n            movieItems.push(film)\n          })\n          this.setState({movies: movieItems})\n          })\n      .catch((err) => {\n              console.log(err)\n          }) \n  }\n\n  render() {\n    return (\n      <div>\n<Jumbotron bsPrefix='jumbotron'>\n  <h1 className='title'>Welcome to the MovieDB</h1>\n  <h3 className='intoduction'>\n    Search the MovieDB for your favorite movies, find out more information and watch trailers\n  </h3>\n  <InputGroup className=\"mb-3\">\n    <FormControl bsPrefix='searchInput'\n      aria-label=\"Default\"\n      aria-describedby=\"inputGroup-sizing-default\"\n      className='searchInput' type='text' name=\"searchMovie\" value={this.state.titleInput} onChange={this.onChange} onClick={(e)=>{e.preventDefault()}} placeholder=\" Search...\"\n    />\n  </InputGroup>\n</Jumbotron>\n       {this.state.movies}\n      </div>\n    );\n  }\n}\n\n\nexport default Search;","import React, { Component } from 'react';\nimport './App.css';\nimport Search from './Components/Search/Search.js'\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <h1>Movie Search App</h1>\n        <img  alt= \"powers-by-tmdb\" width= \"50\" src =\"powered-by-rectangle-green.svg\" />\n        </header>\n        <Search />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}