{"version":3,"sources":["Components/VideoPlayer/VideoPlayer.js","Components/Card/MovieCard.js","Components/Search/Search.js","App.js","serviceWorker.js","index.js"],"names":["VideoPlayer","props","trailer","trailers","videos","forEach","item","index","URL","key","className","url","controls","id","width","height","push","MovieCard","populateModal","process","axios","get","then","res","results","data","console","log","clips","setState","visible","toggleModal","state","bind","this","movie","window","location","href","Card","bsPrefix","Header","title","release_date","Body","OverlayTrigger","overlay","Tooltip","Button","variant","onClick","visitHomePage","Text","overview","Img","src","poster","alt","onError","e","target","onerror","Footer","footer","closable","destroyOnClose","onOk","onCancel","Component","Search","handleOk","modal","handleCancel","loading","noData","movies","titleInput","onChange","LATEST","movieItems","poster_path","backdrop","backdrop_path","film","stopPropagation","preventDefault","nativeEvent","stopImmediatePropagation","API_KEY","input","value","TMDB","status","catch","err","content","size","Jumbotron","InputGroup","FormControl","aria-label","aria-describedby","type","name","placeholder","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eb6e6c33.chunk.js","sourcesContent":["import React from 'react'\nimport ReactPlayer from 'react-player'\nimport './VideoPlayer.css';\n\nfunction VideoPlayer(props) {\n    let trailer = props.trailers\n    var videos = []\n    trailer.forEach((item, index) => {\n        var URL = `https://www.youtube.com/watch?v=${item.key}&enablejsapi=1`\n        const trailer = <div className='player-wrapper '>\n            <ReactPlayer\n                className='react-player'\n                url={URL}\n                controls\n                key={index}\n                id={item.id}\n                width='100%'\n                height='100%'/>\n        </div>\n        videos.push(trailer);\n    })\n\n    return <> {videos[0]} </> \n}\n\nexport default VideoPlayer;","import React, {Component} from 'react'\nimport axios from 'axios';\nimport {Card, Button, OverlayTrigger, Tooltip} from 'react-bootstrap';\nimport {Modal} from 'antd';\nimport './MovieCard.css'\nimport VideoPlayer from '../VideoPlayer/VideoPlayer';\n\nexport default class MovieCard extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            trailers: [],\n            visible: false\n        }\n        this.populateModal = this\n            .populateModal\n            .bind(this);\n        this.toggleModal = this\n            .toggleModal\n            .bind(this);\n    }\n    visitHomePage() {\n        const url = 'https://www.themoviedb.org/movie/' + this.props.movie.id\n        window.location.href = url\n    }\n\n    populateModal = (id) => {\n        let URL = `https://api.themoviedb.org/3/movie/${id}?api_key=${process.env.REACT_APP_TMDB_API_KEY}&append_to_response=videos`;\n        axios\n            .get(URL)\n            .then((res) => {\n                var results = res.data.videos.results\n                console.log(results)\n                var clips = []\n                results.forEach((item) => {\n                    clips.push(item);\n                });\n                this.setState({trailers: clips})\n            })\n        this.setState({visible: true});\n    };\n\n    toggleModal = () => {\n        this.setState({\n            visible: !this.state.visible,\n            trailers: []\n        });\n    }\n\n    render() {\n        var movie = this.props.movie\n        return (\n            <div className=\"cardsConainer\">\n                <Card key={movie.id} bsPrefix='card'>\n                    <Card.Header bsPrefix='cardHeader'>\n                        <p className='movieTitle'>{movie.title}</p>\n                        <p>{movie.release_date}</p>\n                    </Card.Header>\n                    <Card.Body className='cardBody'>\n                        <div className='cardOverlay'>\n                            <div className='actionBtn'>\n                                <OverlayTrigger\n                                    overlay={< Tooltip id = \"tooltip-disabled\" > <h3>Watch Trailer</h3> </Tooltip>}>\n                                    <span className=\"d-inline-block\">\n                                        <Button\n                                            variant=\"link\"\n                                            onClick={() => {\n                                            this.populateModal(movie.id)\n                                        }}>\n                                            <span className='glyphicon glyphicon-play-circle'></span>\n                                        </Button>\n                                    </span>\n                                </OverlayTrigger>\n                                <OverlayTrigger\n                                    overlay={< Tooltip id = \"tooltip-disabled\" > <h3>Visit Homepage</h3> </Tooltip>}>\n                                    <span className=\"d-inline-block\">\n                                        <Button\n                                            variant=\"link\"\n                                            onClick={this\n                                            .visitHomePage\n                                            .bind(this)}>\n                                            <span className=\"glyphicon glyphicon-info-sign\"></span>\n                                        </Button>\n                                    </span>\n                                </OverlayTrigger>\n                            </div>\n                            <Card.Text bsPrefix='cardText'>\n                                {movie.overview}\n                            </Card.Text>\n                        </div>\n                        <Card.Img\n                            className='cardImage'\n                            variant=\"top\"\n                            src={movie.poster}\n                            alt='movie_backdrop'\n                            onError=\n                            {(e)=>{e.target.onerror = null ; e.target.src=\"http://www.2queue.com/wp-content/uploads/tdomf/4299/movie-poster-coming-soon.png\"}}/>\n                    </Card.Body>\n                    <Card.Footer bsPrefix='cardFooter'></Card.Footer>\n                </Card>\n                <Modal\n                    footer={null}\n                    closable={false}\n                    destroyOnClose={true}\n                    width='70vw'\n                    visible={this.state.visible}\n                    onOk={this.toggleModal}\n                    onCancel={this.toggleModal}\n                    toggleModal={this.toggleModal}>\n                    <VideoPlayer trailers={this.state.trailers}/>\n                </Modal>\n            </div>\n        )\n    }\n}\n","import React, {Component} from 'react'\nimport axios from 'axios';\nimport {Jumbotron, InputGroup, FormControl} from 'react-bootstrap';\nimport {Spin} from 'antd';\nimport MovieCard from '../Card/MovieCard'\nimport './search.css'\nimport 'antd/dist/antd.css';\n\nclass Search extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            loading: false,\n            noData: false,\n            movies: [],\n            titleInput: ''\n        }\n        this.onChange = this\n            .onChange\n            .bind(this)\n    }\n\n    componentDidMount() {\n        const API_KEY = process.env.REACT_APP_TMDB_API_KEY\n        const LATEST = `https://api.themoviedb.org/3/movie/popular?api_key=${API_KEY}&language=en-US`;\n        axios\n            .get(LATEST)\n            .then((res) => {\n                var movieItems = []\n                var results = res.data.results\n                results.forEach((movie) => {\n                    movie.poster = 'https://image.tmdb.org/t/p/original' + movie.poster_path\n                    movie.backdrop = 'https://image.tmdb.org/t/p/original' + movie.backdrop_path\n                    const film = <MovieCard movie={movie} key={movie.id}/>\n                    movieItems.push(film)\n                })\n                this.setState({movies: movieItems})\n            });\n    }\n\n    handleOk = e => {\n        this.setState({\n            modal: {\n                visible: false\n            }\n        });\n    };\n\n    handleCancel = e => {\n        this.setState({\n            modal: {\n                visible: false\n            }\n        });\n    };\n\n    onChange(e) {\n        e.stopPropagation();\n        e.preventDefault();\n        e.nativeEvent.stopImmediatePropagation();\n        const API_KEY = process.env.REACT_APP_TMDB_API_KEY;\n        const input = e.target.value;\n        this.setState({titleInput: input});\n        const LATEST = `https://api.themoviedb.org/3/movie/latest?api_key=${API_KEY}&language=en-US`;\n        const TMDB = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${input}&page=1&include_adult=false`;\n\n        if (input === null) {\n            axios\n                .get(LATEST)\n                .then((res) => {\n                    var movieItems = []\n                    var results = res.data.results\n                    results.forEach((movie) => {\n                        movie.poster = 'https://image.tmdb.org/t/p/original' + movie.poster_path\n                        movie.backdrop = 'https://image.tmdb.org/t/p/original' + movie.backdrop_path\n                        const film = <MovieCard movie={movie} key={movie.id}/>\n                        movieItems.push(film)\n                    })\n                    this.setState({movies: movieItems})\n                })\n        } else {\n            axios\n                .get(TMDB)\n                .then((res) => {\n                    if (res.data.results >= 0) {\n                        this.setState({loading: false})\n                        console.log('Looks like there was a problem. Status Code: ' + res.status);\n                        this.setState({noData: true})\n                        return;\n                    }\n                    var movieItems = []\n                    var results = res.data.results\n                    results.forEach((movie) => {\n                        movie.poster = 'https://image.tmdb.org/t/p/original' + movie.poster_path\n                        movie.backdrop = 'https://image.tmdb.org/t/p/original' + movie.backdrop_path\n                        const film = <MovieCard movie={movie} key={movie.id}/>\n                        movieItems.push(film)\n                    })\n                    this.setState({movies: movieItems})\n                })\n                .catch((err) => {\n                    console.log(err)\n                });\n        }\n    }\n\n    render() {\n        let content = this.state.loading\n            ? <div className=\"loadingContainer\"><Spin size=\"large\" className=\"spinner\"/></div>\n            : this.state.movies;\n        return (\n            <div>\n                <Jumbotron bsPrefix='jumbotron' >\n                    <InputGroup className=\"mb-3\">\n                        <FormControl\n                            bsPrefix='searchInput'\n                            aria-label=\"Default\"\n                            aria-describedby=\"inputGroup-sizing-default\"\n                            className='searchInput'\n                            type='text'\n                            name=\"searchMovie\"\n                            value={this.state.titleInput}\n                            onChange={this.onChange}\n                            onClick={(e) => {\n                            e.preventDefault()\n                        }}\n                            placeholder=\" Search...\"/>\n                    </InputGroup>\n                </Jumbotron>\n                <div className='contentContainer'>\n                    {content}\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default Search;","import React, { Component } from 'react';\nimport './App.css';\nimport Search from './Components/Search/Search.js'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <h1 className=\"appTitle\">Movie Trailer Search App</h1>\n        <img  alt= \"powers-by-tmdb\" width= \"100\" src =\"powered-by-rectangle-green.svg\" />\n        </header>\n        <Search />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}